{"version":3,"file":"commands.js","mappings":"YACA,ICDIA,EACAC,EAeAC,EDfAC,EAAsB,GCO1B,SAASC,EAAUC,GACjBC,OAAOC,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,eAAgB,CAC5EC,KAAM,eACNC,QAASR,IACR,SAASS,OAqDd,SAASC,EAAeF,GACtBb,EAASgB,KAAKC,MAAMJ,EAAQA,SAC5BK,UAAUlB,GAAQ,SAASc,GACzBZ,EAAeiB,QACfjB,EAAiB,KACjBD,EAASmB,YACTnB,EAAW,QAIf,SAASoB,EAAaR,GACpBX,EAAiB,KACjBD,EAASmB,YACTnB,EAAW,KC9EbE,EAAoBmB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,GDIxBrB,OAAOsB,WAAa,SAAUC,MA8EJ,oBAATC,KAAwBA,KAClB,oBAAXH,OAA0BA,YACf,IAAXI,EAAAA,EAA0BA,EAAAA,OAClCC,GAMFC,kBAzEF,SAA2BC,GAKzB,IAHAlC,EAASmC,cAGKnC,EAAOoC,cAEnB,IACEC,QAAQrC,EAAOoC,eAAe,SAASE,EAAMjC,GACvCiC,EACFC,iBAAiBD,GAAM,SAAUE,EAASnC,GACpCmC,EACFlC,OAAOC,QAAQC,QAAQC,KAAKgC,KAAKC,qBAAqBF,EACpD,CAACG,aAAcrC,OAAOsC,aAAaC,OAAO,SAAS/B,GACjDoB,EAAMd,gBAGVhB,EAAUC,GACV6B,EAAMd,iBAIVhB,EAAUC,GACV6B,EAAMd,gBAGV,MAAO0B,GACP1C,EAAU0C,GACVZ,EAAMd,gBAGH,CAELnB,EAAWiC,EAGX,IAAIa,EAAM,IAAIC,IAAI,sBAAsBC,WAAWtB,OAAOuB,UAAUC,WAGpE7C,OAAOC,QAAQ6C,GAAGC,mBAAmBN,EAFjB,CAAEO,MAAO,GAAIC,OAAQ,GAAIC,iBAAiB,IAEL,SAAS1C,IAChEZ,EAAiBY,EAAO2C,OACTC,gBAAgBpD,OAAOqD,UAAUC,sBAAuB7C,GACvEb,EAAewD,gBAAgBpD,OAAOqD,UAAUE,oBAAqBxC,Q","sources":["webpack:///webpack/bootstrap?","webpack:///./src/commands/commands.js?","webpack:///webpack/runtime/global?"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","var config;\nvar btnEvent;\n\n// The initialize function must be run each time a new page is loaded.\nOffice.initialize = function (reason) {\n};\n\n// Add any UI-less function here.\nfunction showError(error) {\n  Office.context.mailbox.item.notificationMessages.replaceAsync('github-error', {\n    type: 'errorMessage',\n    message: error\n  }, function(result){\n  });\n}\n\nvar settingsDialog;\n\nfunction insertDefaultGist(event) {\n\n  config = getConfig();\n\n  // Check if the add-in has been configured.\n  if (config && config.defaultGistId) {\n    // Get the default gist content and insert.\n    try {\n      getGist(config.defaultGistId, function(gist, error) {\n        if (gist) {\n          buildBodyContent(gist, function (content, error) {\n            if (content) {\n              Office.context.mailbox.item.body.setSelectedDataAsync(content,\n                {coercionType: Office.CoercionType.Html}, function(result) {\n                  event.completed();\n              });\n            } else {\n              showError(error);\n              event.completed();\n            }\n          });\n        } else {\n          showError(error);\n          event.completed();\n        }\n      });\n    } catch (err) {\n      showError(err);\n      event.completed();\n    }\n\n  } else {\n    // Save the event object so we can finish up later.\n    btnEvent = event;\n    // Not configured yet, display settings dialog with\n    // warn=1 to display warning.\n    var url = new URI('dialog.html?warn=1').absoluteTo(window.location).toString();\n    var dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n    Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n      settingsDialog = result.value;\n      settingsDialog.addEventHandler(Office.EventType.DialogMessageReceived, receiveMessage);\n      settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\n    });\n  }\n}\n\nfunction receiveMessage(message) {\n  config = JSON.parse(message.message);\n  setConfig(config, function(result) {\n    settingsDialog.close();\n    settingsDialog = null;\n    btnEvent.completed();\n    btnEvent = null;\n  });\n}\n\nfunction dialogClosed(message) {\n  settingsDialog = null;\n  btnEvent.completed();\n  btnEvent = null;\n}\n\nfunction getGlobal() {\n  return (typeof self !== \"undefined\") ? self :\n    (typeof window !== \"undefined\") ? window :\n    (typeof global !== \"undefined\") ? global :\n    undefined;\n}\n\nvar g = getGlobal();\n\n// The add-in command functions need to be available in global scope.\ng.insertDefaultGist = insertDefaultGist;","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["config","btnEvent","settingsDialog","__webpack_require__","showError","error","Office","context","mailbox","item","notificationMessages","replaceAsync","type","message","result","receiveMessage","JSON","parse","setConfig","close","completed","dialogClosed","g","globalThis","this","Function","e","window","initialize","reason","self","global","undefined","insertDefaultGist","event","getConfig","defaultGistId","getGist","gist","buildBodyContent","content","body","setSelectedDataAsync","coercionType","CoercionType","Html","err","url","URI","absoluteTo","location","toString","ui","displayDialogAsync","width","height","displayInIframe","value","addEventHandler","EventType","DialogMessageReceived","DialogEventReceived"],"sourceRoot":""}